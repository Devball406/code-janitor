<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>Dependency Checker Tool</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <style type="text/css">@import "../css/docstyle.css";</style>
</head>

<body>

<!-- if the line count above changes, you need to adjust 
     documentation in views.py, as it cuts the first 11 lines -->
<div id="lside">
  <ul>
    <li><a href="#overview">Overview</a></li>
    <li><a href="#setup">Setup</a></li>
    <ul>
      <li><a href="#requirements">Requirements</a></li>
      <li><a href="#install">Installation</a></li>
      <ul>
        <li><a href="#from_package">From Packages</a></li>
        <li><a href="#from_git">From Git</a></li>
      </ul>
      <li><a href="#layout">System Layout</a></li>
      <li><a href="#server">Server</a></li>
    </ul>
    <li><a href="#cli">Command Line</a></li>
    <li><a href="#gui">Accessing the GUI</a></li>
    <li><a href="#gui-use">Using the GUI</a></li>
    <li><a href="#admin">Admin Interface</a></li>
  </ul>
  <ul>
    <li><a href="#authors">Authors</a></li>
    <li><a href="#changelog">Changelog</a></li>
    <li><a href="#contributing">Contributing</a></li>
    <li><a href="#license">License</a></li>
  </ul>
</div>

<div id="main">
<div id="overview">
<b>Overview</b>
<p>
The Linux Foundation dependency checker is a tool to explore linkage dependencies of binaries
and libraries built with FOSS components.<br> 
The system consists of two pieces, a command-line program 
"readelf.py" and a GUI frontend that runs in a web browser. 
</p>
<p>You can view the development source from 
<a href="http://git.linuxfoundation.org/?p=dep-checker.git;a=summary">git</a>, 
or check it out using standard git commands:
<pre>
git clone http://git.linuxfoundation.org/dep-checker.git
</pre>
</p>
<p>Bugs can be filed under the 
<a href="http://bugs.linuxfoundation.org/enter_bug.cgi?product=Compliance">Compliance</a>
product.</p>
<p>There is also a 
<a href="https://lists.linux-foundation.org/mailman/listinfo/dep-checker-dev">mail list</a>
for discussion of the tool.</p>
</div>

<div id="setup">
<b>Setup:</b><p></p>
</div>

<div id="requirements">
<b>System Requirements:</b>

<p>The command-line program and the GUI require python. It also runs the OS commands: 
<i>file, ldd, readelf</i>, so these should be present on your system.
The GUI requires <a href="http://www.djangoproject.com">Django</a>, along with sqlite 
support for the results database.
</p>
</div>

<div id="install">
<b>Installation:</b><p></p>
</div>

<div id="from_package">
<b>From Packages:</b>

<p>The program is packaged as an rpm package, with dependencies on python-django. If your 
system does not provide django, or it's named differently, you may need to install using
--nodeps:

<pre>
rpm -Uvh dep-checker-0.0.2-1.noarch.rpm --nodeps
</pre>

The installation creates a "compliance" user/group and should create a desktop menu entry
to launch the server and open the GUI in your web browser.
</p>

<p>
In the future we may bundle django with the package to make things simpler, as well as 
provide .deb packaging.
</p>
</div>

<div id="from_git">
<b>From Git:</b>

<p>You can also checkout the project from git and run it in place:

<pre>
git clone http://git.linuxfoundation.org/dep-checker.git
cd dep-checker
</pre>

Create the static deps database and the documentation (you will need w3m to create README.txt):
<pre>
make
</pre>

Run the server and the gui should show up in a browser window:
<pre>
./bin/dep-checker.py start
</pre>

Ctrl-C will end the wrapper script, but will not kill the server. To kill 
the django server, you can run:

<pre>
./bin/dep-checker.py stop
</pre>
</p>
</div>

<div id="layout">
<b>System Layout:</b>

<p>
The application installs under the <i>/opt/linuxfoundation</i> namespace:

<ul>
<li><b>bin</b> - command line program and wrapper script to launch gui</li>
<li><b>compliance</b> - gui application tree and results database</li>
<li><b>doc</b> - License file</li>
<li><b>share</b> - Desktop menu files and icons</li>
</ul>

Under the compliance tree, is a typical django project layout:

<ul>
<li><b>compliance</b> - sqlite results database</b>
<li><b>__init__.py, manage.py, settings.py, urls.py</b> - generated by django at project 
    creation, <i>settings.py</i> does have some configurable settings. None of the others should 
    be altered.</li>
<li><b>linkage</b> - dep-checker GUI code</li>
<li><b>media</b> - static html elements such as images, css, javascript files</li>
<li><b>templates/linkage</b> - the dep-checker html tree</li>
</ul>
</div>

<div id="server">
<b>Running the GUI server:</b>

<p>To run the gui/server (as user compliance for installed package), there is a 
script that su's to the compliance user, starts the server and attempts to open a browser
page to the GUI:

<pre>
/opt/linuxfoundation/bin/dep-checker.py start
</pre>

To stop the server run:

<pre>
/opt/linuxfoundation/bin/dep-checker.py stop
</pre>
</p>

<p>If for some reason this does not work, you can manually perform the steps to start the
 server:

<pre>
su - compliance
cd /opt/linuxfoundation/compliance
python manage.py runserver
</pre>

You can terminate the server from this console by hitting ctrl-C
</p>
</div>

<div id="cli">
<b>Running the command line program:</b>

<p>The command line program is called <i>readelf.py</i>, and it resides in 
<i>/opt/linuxfoundation/bin</i>:

<pre>
Usage: readelf.py [options] &lt;file/dir tree to examine&gt; [recursion depth]

Options:
  -c           output in csv format
  -s DIR       directory tree to search
  --no-static  don't look for static deps
  --version    show program's version number and exit
  -h, --help   show this help message and exit
</pre>

The <i>-c</i> option is primarily used to pass data to the GUI. The format without this
argument is more human-readable if you are using the command line directly.

<p>
The <i>-s</i> option expects a directory as an argument. If you specify this option, the
program will attempt to drill down through the directory mentioned to find only files
with the name specified by the next argument to analyse:

<pre>
/opt/linuxfoundation/bin/readelf.py -s /foo bar
</pre>

The program will search everything under <i>/foo</i>, for ELF files named <i>bar</i>
</p>

<p>Specifying only a directory will search and report on <i>every</i> ELF file in that
directory tree:

<pre>
/opt/linuxfoundation/bin/readelf.py /foo
</pre>

Specifying only a file will attempt to test only the specified file:

<pre>
/opt/linuxfoundation/bin/readelf.py /foo/bar/baz
</pre>

The recursion level is an optional argument, that will attempt to not only report the
<i>direct</i> dependencies, but also report the dependencies of each library used by
the target file:

<pre>
/opt/linuxfoundation/bin/readelf.py /foo/bar/baz 4
</pre>

This would attempt to recurse down 4 levels from the target file, giving output something 
like this:

<pre>
[1]/foo/bar/baz:
  libtermcap.so.2
  [2]/lib/libtermcap.so.2.0.8:
    libc.so.6
    [3]/lib/i686/libc-2.10.1.so:
      ld-linux.so.2
[1]/foo/bar/baz:
  libdl.so.2
  [2]/lib/libdl-2.10.1.so:
    libc.so.6
    [3]/lib/i686/libc-2.10.1.so:
      ld-linux.so.2
  [2]/lib/libdl-2.10.1.so:
    ld-linux.so.2
[1]/foo/bar/baz:
  libc.so.6
  [2]/lib/i686/libc-2.10.1.so:
    ld-linux.so.2
</pre>

You will note that even though we asked for a recursion level of 4, the test stopped at 
level 3, as the program detects when no further recursion is possible.
</p>

<p>The <i>--no-static</i> option suppresses trying to resolve staticly linked dependencies.</p>

<div id="gui">
<b>Accessing the GUI:</b>
<p>
If a browser does not open by launching the menu item, you can access the GUI 
(once the server is started): at 
<a href="http://127.0.0.1:8000/linkage" target="_blank">http://127.0.0.1:8000/linkage</a>.
</p>
</div>

<div id="gui-use">
<b>Using the GUI:</b>

<p>The GUI interface is pretty straighforward, with 5 tabs to access various aspects of
program:

<ul>
<li><a href="#Test"><b>Test</b></a> - Test entry, initiate form</li>
<li><a href="#Results"><b>Results</b></a> - Tabular list of existing test results</li>
<li><a href="#Licenses"><b>Licenses</b></a> - License entry tab</li>
<li><a href="#Target Licenses"<b>Target Licenses</b></a> - Define license bindings for targets (test files)</li>
<li><a href="#Library Licenses"<b>Library Licenses</b></a> - Define license bindings for libraries</li>
<li><a href="#License Policies"<b>License Policies</b></a> - Define sets of target/dependency license policies, to be flagged during testing</li>
<li><b>Documentation</b></a> - This documentation</li>
</ul>

The final page, which isn't visible in the tabs, is the test results detail page, 
brought up by either running a test, or clicking on the link in the results page.
</p>

<div id="Test">
<b>Test:</b>

<p>A test sequence would typical start at the <b>Test</b> page, where you enter the test
criteria. This setup parallels the operation of the command line program, where you
select whether to search for a file under a directory, test a whole directory, or just 
a single file. There is also a drop-down to select the recursion level.</p>

<p>The <i>user</i> field is pre-populated with the <i>compliance</i> user, but can be
overridden. The <i>project</i> and <i>comments</i> fields are optional for your use in
tracking tests.</p>

<p>Once you enter the test criteria, click on the <b>Run Test</b> button. After the test
runs you will be presented with the detailed test results in tabular form. Depending on
the number of files to be tested and the recursion level, the test can take a few minutes,
so be patient.</p>

<p>Until there are licenses and bindings defined, the results detail will show <i>TBD</i> for
both the target and dependency licenses. Now that there is data in the system, you can go back
and define these relationships and update the test data.</p>

<p>There is a <i>Print Results</i> button on the detail page that should open the browser print
dialog to print to a physical printer or to a file. Some parts of the GUI are hidden in the
printed output so that only the test results show up in the printed report.</p>

</div>

<div id="Results">
<b>Results:</b>

<p>The test results should also be accessible from the <b>Results</b> page. This is a tabular
list of all the test runs, sorted by test id/date. The far-right column has the information
entered from the <b>Test</b> tab. Clicking on the link for the target file or directory will 
open the detail tab. If you want to delete test results, you can select the checkboxes and 
delete them from here, using the <i>Delete Selected Tests</i> button.</p>
</div>

<div id="Licenses">
<b>Licenses:</b>

<p>The <b>License</b> tab lets you enter license/version info. You enter the license name 
<i>(example: GPL)</i> in the left-hand field and the version <i>(example: 3.0)</i> in the
right-hand field. Like the <b>Results</b> tab, you can select and delete licenses using the
checkboxes and the <i>Delete Selected Licenses</i> button. The license-version combination will
be concatenated in report to look like: <i>GPL 3.0</i>.</p>

</div>

<div id="Target Licenses">
<b>Target Licenses:</b>

<p>The <b>Target Licenses</b> tab lets you define the license binding for the <i>target</i> files,
that is, the files that are being tested for dependencies. The drop down under <i>Target</i>
will show all files having test data. The drop-down under <i>License</i> will show all the
licenses defined in the <b>License</b> tab. If there is no test-data or no licenses, the
drop-downs will be empty.</p>

</div>

<div id="Library Licenses">
<b>Library Licenses:</b>

<p>The <b>Library Licenses</b> tab lets you define the license binding for the library
dependencies. The drop down under <i>License</i> will show all libraries in the test data. 
The drop-down under <i>License</i> will show all the licenses defined in the <b>License</b> 
tab. If there is no test-data or no licenses, the drop-downs will be empty. The <i>License</i>
selector does not differentiate between static and dynamic versions, both will be treated the
same.</p>

</div>

<div id="License Policies">
<b>License Policies:</b>

<p>The <b>License Policies</b> tab lets you define pairing of target/library licenses that could
have potential issues. You select the <i>Target License</i> and <i>Library License</i> from the
drop-downs and then select the relationship, either Static, Dynamic, or both. When a test is
run, violations of these policy settings will show up the the report detail printed in red with a
red flag after the License name. Like the other tabs, you can select and delete policues using
the checkboxes and the <i>Delete Selected Policies</i> button.</p>

</div>

</div> <!-- end of Using the GUI -->
 
<div id="admin">
<b>Admin interface:</b>

<p>In the current configuration, the django admin interface is enabled. While you can use 
this interface to directly access the database records, one should take care not to alter 
existing records, except in the case of wishing to add license information to records.</p>

<p><b>admin interface:</b> <a href="http://127.0.0.1:8000/admin" target="_blank">http://127.0.0.1:8000/admin</a>
(username compliance, password compliance)
</p>
</div>

<!-- content beyond here is generated by the Makefile -->
